<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAKBwUADggHABEIBwASCggAFQsJABUMCgAbEA0AHREOABsSDgAgFBAAIRQQACIXEgAqFxQAJhkUACwb
        FgAoHBcANxsXADUeGAAsHxkAOR8ZADIgGQAwIBoANCAaAC4hGgA5IBsAOyEbADkjHAA+IxwAQiMdAEMl
        HgBBJyAATCkbAE0qGgBpLQoARioiAEcqIgBZLhkASi0kAEwtJQBQLiYAUjAnAFkwKABMMigAYzEoAFIz
        KQB+NxEAZDMmAF81IQBRNSoAZzMrAFw3IgBlNSwAVDYuAFA3LABdNiwAWjcsAGQ3LQBeOC4AajguAFc6
        LgCTPw4AWzouAJNADgBhOi8AWTsuAGg7MABsOzEAmEIQAGxCHgBgPysAYz4yAHA9MgB3PTMAej0zAJpG
        EQBdQTMAcj80AGNBNABwQDUAnEcUAFtCNgB2QTUAhUE2AHBDNwBfRTcAc0M4AGhEOABvRDgAa0U4AGtK
        KgCARDgAc0U7AG5NIwB0RjkAekc6AIZGOwChUBUAfEg7AH1IOwCDSDsAiUg8AIBJPABuSj4Adko9AHNL
        OwCFSjwAfEs9AIBLPQCATjUAhEs+AKRUGQB5TT4Ag0w/AG1OQQCdUioAjU1AAIhOQAB+T0EAgVBAAH5Q
        QgB4UUEAdVFCAJZUMQCFUUAAf1olAItQQgCEUUIAhlFDAIxSQwCEU0UAiFREAItURQCNVkcAiVdHAIJY
        RwB8WUkAhVlHAKddMwCQWUoAkFtKAJFaTQCOXEkAkVxLAI1cTQCRXE0AlWBBAI1eSwCMX0wAi19NAJFe
        TwCQYEwAj2BOAIFiUQCRYVAAlmBTAJJhUgCOYlAAlGFSAJJkTQCVYlQAh2dKAJVkUgCTZVEAkmZQAJBm
        UQCPZlMAk2dQAJZlVgCVZ1MAkmhRAJRoUQCXZ1kAmmdaAItpWACTaVYAnmheAJZtWACacUsAmWxcAJps
        XQCXblgAl3BYAJhvWwCebWIAoG1iAJhxWgCac1wAnnFjAJx0XwCfc2UAm3ZfAKN2agC1e1UAoXlqAJ98
        ZQDHhjoApXpvAKZ6bwCjgGsAx5I4AKqCdgCzhG8ApoZxAKuHdwCsh3oArYxwAK2KfQCsjnoApJVsAK2R
        fQCzkIUAtY+IALOThwC2mYwAuJuMALifjgC4oIwAvZ2WALyjlgDCo54Au6yKAMConADhtXEAwq6fAOO1
        gADDsaAAxLCkAMexpwDduJAAyrGsAMa2pgDZvJMAyrqsAM26swDOu7UA0by4AM2/tADOwLQA0cO6ANTF
        vwDXysUA2MrFAN7RzwDe1NAA4NfTAOHa1wDm390A59/eAOrl5ADt6egA7+3sAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAUl9wdWdYNyUYDAoIBQIBAHNkaXZvV0YoHREODQkGBAOAfXR+hl1BNiccExQXDwsHioSDY2J4
        UyspNCMbGhYVEpWQmZd7LR9CLiNQJiIeGRCnjJCukTwhZmggTVQ7MDUqrLOfm3pDPkCYMnFWPzk9S7i3
        u6tyT0ovd2wsWzoxMzjMxb+9iW5gRIGIJEhRTEdO1dTOxMDDx3yPnFlVSWFqXuLd2tLJ4N6gh3mxRW1a
        ZWvp7Ojf1uTnrc3c0FyUf4WC8e/u7ebX0crCvra1paSSk/Xz8Orj4djPxry6uZaipp749vTx5dnWy8Gy
        oaiwo6qq+vn38uvb08ivmp2Oi42ptAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>